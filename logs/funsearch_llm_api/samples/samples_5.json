{"sample_order": 5, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with Best Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"\n    Hybrid strategy combining Best Fit and Worst Fit approaches.\n\n    This strategy aims to balance between the Best Fit and Worst Fit strategies. It gives higher priority to bins that are\n    close to the item size but also ensures that very large or very small bins are utilized, thus balancing the distribution.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    best_fit_ratios = item / bins\n    worst_fit_ratios = (bins - item) / bins\n    best_fit_priorities = -np.log(best_fit_ratios + 1e-9)  # +1e-9 to avoid log(0)\n    worst_fit_priorities = -np.log(worst_fit_ratios + 1e-9)  # +1e-9 to avoid log(0)\n    \n    # Combine best fit and worst fit priorities\n    hybrid_priorities = (best_fit_priorities + worst_fit_priorities) / 2\n    \n    return hybrid_priorities\n\n", "score": -212.1}