{"sample_order": 5, "strategy": "Hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid of Best Fit and Worst Fit strategies.\n\n    The strategy first calculates the Best Fit priority scores and then modifies these scores by incorporating\n    the Worst Fit priorities. This creates a balance between finding tight fits and utilizing more open bins,\n    which can help distribute items more evenly across bins and reduce the potential for overflow in any single bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best Fit Component\n    best_fit_ratios = item / bins\n    best_fit_priorities = -np.log(best_fit_ratios)\n    \n    # Worst Fit Component\n    remaining_capacities = bins - item\n    valid_bins = remaining_capacities > 0\n    worst_fit_scores = np.where(valid_bins, remaining_capacities, -np.inf)\n    worst_fit_priorities = worst_fit_scores\n    \n    # Combine the components for hybrid scoring\n    hybrid_priorities = best_fit_priorities * 0.5 + worst_fit_priorities * 0.5\n    return hybrid_priorities\n\n", "score": -500.0}