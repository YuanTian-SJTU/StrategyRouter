{"sample_order": 5, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    \n    for i in range(len(bins)):\n        if bins[i] < item:\n            priorities[i] -= 10  # Penalize bins that can't fit the item\n        elif bins[i] < 2 * item:\n            priorities[i] -= 5  # Slightly penalize bins that are barely fit\n        else:\n            priorities[i] += 2  # Reward bins that have plenty of space\n            \n        if bins[i] > 0.5 * np.max(bins):\n            priorities[i] += 3  # Reward bins that are larger than half the largest bin\n            \n    return priorities\n\n", "score": -500.0}