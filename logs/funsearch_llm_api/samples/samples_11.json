{"sample_order": 11, "strategy": "first_fit", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with First Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacities\n    remaining_capacities = bins - item\n    \n    # Initialize priorities array with infinity\n    priorities = np.full_like(bins, np.inf)\n    \n    # First Fit strategy: find the first bin that can accommodate the item\n    for i, capacity in enumerate(remaining_capacities):\n        if capacity >= 0:\n            priorities[i] = -capacity  # Lower remaining capacity gets higher priority\n            break\n    \n    return priorities\n\n", "score": -212.75}