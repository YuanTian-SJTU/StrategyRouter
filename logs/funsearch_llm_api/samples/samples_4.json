{"sample_order": 4, "strategy": "worst_fit", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with Worst Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    available_space = bins - item\n    invalid_spaces = available_space < 0\n    available_space[invalid_spaces] = -np.inf\n    priorities = -available_space\n    return priorities\n\n", "score": -212.0}