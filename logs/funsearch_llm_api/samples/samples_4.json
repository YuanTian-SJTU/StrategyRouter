{"sample_order": 4, "strategy": "hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a Hybrid Strategy.\n\n    The Hybrid Strategy combines elements of Best Fit and Greedy approaches:\n    - It first calculates a Best Fit priority (lowest remaining capacity after adding the item).\n    - It then adjusts the priority by considering the ratio of remaining capacity to item size\n      to give preference to bins that can accommodate the item without leaving too much waste.\n    - Finally, it normalizes the priorities to ensure they are comparable across different scales.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best Fit component: prioritize bins with smallest remaining capacity after adding item\n    remaining_capacities = bins - item\n    remaining_capacities[remaining_capacities < 0] = np.inf  # items that can't fit get priority of infinity\n    best_fit_scores = 1 / remaining_capacities\n\n    # Greedy component: prioritize bins where remaining capacity after adding item is a small fraction of item size\n    remaining_ratios = (bins - item) / bins\n    greedy_scores = 1 / (1 + remaining_ratios)  # higher for bins that are closer to full\n\n    # Combine both components with weights\n    hybrid_scores = 0.7 * best_fit_scores + 0.3 * greedy_scores\n\n    # Normalize priorities\n    hybrid_scores = (hybrid_scores - np.min(hybrid_scores)) / (np.max(hybrid_scores) - np.min(hybrid_scores) + 1e-10)\n    return -hybrid_scores  # return negative to make higher original score mean higher priority\n\n", "score": -377.5}