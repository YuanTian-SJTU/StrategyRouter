{"sample_order": 4, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    \n    # Adjust priorities based on bin capacity\n    for i in range(len(bins)):\n        if bins[i] < item:\n            priorities[i] = -np.inf  # Cannot fit the item in the bin\n        elif bins[i] - item < 10:\n            priorities[i] *= 1.5  # Increase priority for bins with little remaining space\n        else:\n            priorities[i] *= 0.8  # Decrease priority for bins with a lot of remaining space\n    \n    # Normalize priorities\n    min_priority = np.min(priorities)\n    max_priority = np.max(priorities)\n    if max_priority - min_priority > 0:\n        priorities = (priorities - min_priority) / (max_priority - min_priority)\n    \n    return priorities\n\n", "score": -500.0}