{"sample_order": 4, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with a hybrid strategy combining Best Fit and Greedy approaches.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best Fit component: prioritize bins with the smallest remaining space that can fit the item\n    best_fit_scores = np.where(bins >= item, item / bins, np.inf)\n    best_fit_priorities = -best_fit_scores\n\n    # Greedy component: prioritize bins with the largest remaining space\n    greedy_scores = bins\n    greedy_priorities = greedy_scores\n\n    # Combine the two strategies with weights\n    hybrid_priorities = 0.6 * best_fit_priorities + 0.4 * greedy_priorities\n\n    return hybrid_priorities\n\n", "score": -500.0}