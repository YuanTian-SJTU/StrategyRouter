{"sample_order": 4, "strategy": "Hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with Hybrid Fit strategy.\n\n    Hybrid strategy combines First Fit and Best Fit. It first checks if the item can fit into any bin,\n    prioritizing bins that would leave the least remaining space after the item is placed (Best Fit).\n    If no bin can fit the item, it returns an array of zeros indicating no priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Check if item can fit into any bin\n    can_fit = bins > item\n    \n    # Initialize priorities with zeros\n    priorities = np.zeros_like(bins)\n    \n    # Only calculate priorities for bins where the item fits\n    if np.any(can_fit):\n        # For bins where item can fit, use Best Fit logic (smallest remaining space)\n        remaining_space = bins[can_fit] - item\n        priorities[can_fit] = -remaining_space\n    \n    return priorities\n\n", "score": -212.0}