{"sample_order": 2, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n    priorities = np.zeros_like(bins, dtype=float)\n    \n    for i, bin_capacity in enumerate(bins):\n        if item > bin_capacity:\n            priorities[i] = 0  # Cannot fit, priority is 0\n        else:\n            ratio = item / bin_capacity\n            if ratio < 0.1:\n                priorities[i] = 1000 * (1 - ratio)  # High priority for very small items\n            elif ratio < 0.5:\n                priorities[i] = 100 * (1 - ratio)  # Moderate priority for small items\n            else:\n                priorities[i] = 10 * (1 - ratio)  # Lower priority for larger items\n                \n            # Add a penalty for bins that are very close to being full\n            if bin_capacity < 1.1 * item:\n                priorities[i] -= 50\n                \n            # Add a bonus for bins that are nearly empty\n            if bin_capacity > 10 * item:\n                priorities[i] += 20\n                \n            # Cap the priority to a maximum of 100\n            priorities[i] = min(priorities[i], 100)\n    \n    return priorities\n\n", "score": null}