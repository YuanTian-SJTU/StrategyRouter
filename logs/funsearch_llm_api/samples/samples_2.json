{"sample_order": 2, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with a hybrid strategy combining Best Fit and Worst Fit.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best Fit component: prioritize bins that fit the item and have the least remaining space\n    remaining_space = bins - item\n    best_fit_mask = remaining_space >= 0\n    best_fit_scores = np.where(best_fit_mask, -remaining_space, np.inf)\n    \n    # Worst Fit component: prioritize bins with the most remaining space\n    worst_fit_scores = np.where(best_fit_mask, remaining_space, -np.inf)\n    \n    # Combine scores: prioritize bins that are close to full but still have enough space (Best Fit)\n    # and also prioritize bins with more remaining space (Worst Fit)\n    combined_scores = best_fit_scores + worst_fit_scores\n    \n    # Normalize scores to maintain a consistent scale\n    min_score = np.min(combined_scores)\n    max_score = np.max(combined_scores)\n    normalized_scores = (combined_scores - min_score) / (max_score - min_score) if max_score != min_score else 0\n    \n    # Invert scores so higher values indicate higher priority\n    priorities = 1 - normalized_scores\n    \n    return priorities\n\n", "score": null}