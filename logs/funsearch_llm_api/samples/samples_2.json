{"sample_order": 2, "strategy": "hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a Hybrid Best Fit and Worst Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best Fit component: prioritize bins that can fit the item with minimal remaining space\n    remaining_spaces = bins - item\n    best_fit_scores = np.where(remaining_spaces >= 0, 1 / (remaining_spaces + 1e-6), -np.inf)\n    \n    # Worst Fit component: prioritize bins that have the maximum remaining space after fitting the item\n    worst_fit_scores = np.where(remaining_spaces >= 0, remaining_spaces, -np.inf)\n    \n    # Hybrid score: Combine Best Fit and Worst Fit scores with equal weights\n    hybrid_scores = 0.5 * best_fit_scores + 0.5 * worst_fit_scores\n    \n    # Normalize scores to avoid large values\n    if np.max(hybrid_scores) != np.min(hybrid_scores):\n        hybrid_scores = (hybrid_scores - np.min(hybrid_scores)) / (np.max(hybrid_scores) - np.min(hybrid_scores))\n    \n    return hybrid_scores\n\n", "score": -377.5}