{"sample_order": 2, "strategy": "best_fit", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using the Best Fit strategy.\n    The priority is calculated by finding the bin where the item fits with the least remaining space\n    after placing the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    remaining_capacities = bins - item\n    valid_bins = remaining_capacities > 0  # Only consider bins where the item fits\n    \n    # Set invalid bins to a very high value so they are not selected\n    remaining_capacities[~valid_bins] = np.inf\n    \n    # Calculate priority as the negative of the remaining capacity (best fit)\n    priorities = -remaining_capacities\n    \n    return priorities\n\n", "score": -212.0}