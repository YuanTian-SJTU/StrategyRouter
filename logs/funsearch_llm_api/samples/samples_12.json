{"sample_order": 12, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    \n    # Introduce a penalty for bins that are nearly full\n    fullness_threshold = 0.8\n    fullness_penalty = 100.0\n    fullness = bins / np.max(bins)\n    penalties = np.where(fullness > fullness_threshold, fullness_penalty, 0)\n    \n    # Adjust priorities with penalties\n    adjusted_priorities = priorities + penalties\n    \n    # Introduce a bonus for bins that have a capacity that is a multiple of the item size\n    multiple_bonus = 50.0\n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity % item == 0:\n            adjusted_priorities[i] += multiple_bonus\n    \n    # Normalize priorities to ensure they are between 0 and 1\n    min_priority = np.min(adjusted_priorities)\n    max_priority = np.max(adjusted_priorities)\n    if max_priority != min_priority:\n        normalized_priorities = (adjusted_priorities - min_priority) / (max_priority - min_priority)\n    else:\n        normalized_priorities = adjusted_priorities\n    \n    return normalized_priorities\n\n", "score": -469.45}