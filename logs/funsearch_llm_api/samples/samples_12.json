{"sample_order": 12, "strategy": "worst_fit", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with Worst Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    remaining_capacities = bins - item\n    # Filter out bins that cannot fit the item\n    feasible_bins = remaining_capacities[remaining_capacities >= 0]\n    # If all bins are feasible, prioritize the one with the least remaining capacity (Worst Fit)\n    if len(feasible_bins) == len(bins):\n        priorities = remaining_capacities\n        priorities[remaining_capacities < 0] = -np.inf  # Make infeasible bins the lowest priority\n    else:\n        # Prioritize the bin with the maximum remaining capacity (Worst Fit)\n        priorities = -remaining_capacities\n    return priorities\n\n", "score": -500.0}