{"sample_order": 12, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with Best Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Returns priority with which we want to add item to each bin with a hybrid strategy combining Best Fit and Worst Fit.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best Fit component: prefers bins with the least remaining space after placing the item\n    best_fit_ratios = (bins - item) / bins\n    best_fit_scores = -np.log(best_fit_ratios + 1e-9)  # Avoid log(0)\n\n    # Worst Fit component: prefers bins with the most remaining space after placing the item\n    worst_fit_ratios = (bins - item) / bins\n    worst_fit_scores = np.log(worst_fit_ratios + 1e-9)  # Avoid log(0)\n\n    # Hybrid score: combine Best Fit and Worst Fit\n    hybrid_scores = (best_fit_scores + worst_fit_scores) / 2\n\n    # Normalize the scores to ensure they are comparable\n    hybrid_scores = (hybrid_scores - np.min(hybrid_scores)) / (np.max(hybrid_scores) - np.min(hybrid_scores) + 1e-9)\n\n    return hybrid_scores\n\n", "score": -212.75}