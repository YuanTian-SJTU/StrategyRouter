{"sample_order": 12, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid Best Fit and Greedy strategy.\n\n    Strategy: The priority score is a combination of how well the item fits into each bin (Best Fit aspect)\n              and the remaining space in the bin (Greedy aspect). The Best Fit aspect is given by the negative\n              ratio of the item size to the bin capacity, while the Greedy aspect is given by the logarithm of\n              the remaining space in the bin. These two aspects are combined linearly with weights.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best Fit component: How well does the item fit?\n    fit_scores = - (item / bins)\n    \n    # Greedy component: How much space is left?\n    remaining_space = bins - item\n    greedy_scores = np.log(remaining_space)\n    \n    # Combine both components with weights\n    priorities = 0.6 * fit_scores + 0.4 * greedy_scores\n    \n    return priorities\n\n", "score": -500.0}