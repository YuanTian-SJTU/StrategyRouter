{"sample_order": 12, "strategy": "first_fit", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with First Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacities after adding the item\n    remaining_capacities = bins - item\n    # Initialize priority array with zeros\n    priorities = np.zeros_like(bins)\n    \n    # Iterate over each bin\n    for i in range(len(bins)):\n        if remaining_capacities[i] >= 0:\n            # Assign priority based on how much space is left after adding the item\n            priorities[i] = 1 / (1 + remaining_capacities[i])\n        else:\n            # If the bin cannot accommodate the item, assign a very low priority\n            priorities[i] = float('-inf')\n    \n    # If there are no bins that can accommodate the item, return negative infinity for all bins\n    if not np.any(priorities > float('-inf')):\n        return np.full_like(bins, float('-inf'))\n    \n    return priorities\n\n", "score": -212.4}