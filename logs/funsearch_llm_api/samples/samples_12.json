{"sample_order": 12, "strategy": "greedy", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with a combination of Best Fit and Greedy strategies.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best Fit component: prioritize bins where the item fits with the smallest remaining space\n    remaining_spaces = bins - item\n    valid_bins = remaining_spaces >= 0\n    best_fit_priority = np.where(valid_bins, -remaining_spaces, np.inf)\n    \n    # Greedy component: prioritize bins with larger capacities\n    greedy_priority = -bins\n    \n    # Combine the two priorities with equal weight\n    combined_priority = 0.5 * (best_fit_priority + greedy_priority)\n    \n    return combined_priority\n\n", "score": -212.0}