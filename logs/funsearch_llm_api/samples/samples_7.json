{"sample_order": 7, "strategy": "best_fit", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using the Best Fit Decreasing strategy.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n    \n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Sort bins in descending order to prioritize bins with larger remaining capacity\n    sorted_bins = np.sort(bins)[::-1]\n    # Calculate the remaining capacity after placing the item in each bin\n    remaining_capacities = sorted_bins - item\n    # Identify bins that can accommodate the item\n    valid_bins = remaining_capacities >= 0\n    # Calculate the priority as the negative of the remaining capacity (Best Fit Decreasing)\n    priorities = -remaining_capacities * valid_bins\n    # Sort the priorities back to the original bins order\n    priorities = priorities[np.argsort(np.argsort(bins))[::-1]]\n    return priorities\n\n", "score": -236.0}