{"sample_order": 7, "strategy": "hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a Hybrid Best Fit and Worst Fit strategy.\n\n    This strategy combines elements of both Best Fit and Worst Fit. It prioritizes bins where the item fits with minimal,\n    non-negative remaining capacity (Best Fit aspect), but also considers bins with larger remaining capacity if the\n    remaining capacity is still sufficient (Worst Fit aspect). The priority is calculated as a weighted sum of two terms:\n    1. The reciprocal of the remaining capacity after adding the item (favoring tighter fits).\n    2. The remaining capacity itself (favoring bins with more space when the fit is already acceptable).\n    The weights are adjusted based on the size of the item relative to the smallest bin capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    remaining_capacities = bins - item\n    # Check if item fits in any bin\n    if np.any(remaining_capacities >= 0):\n        # Only consider bins where the item fits\n        valid_bins = remaining_capacities >= 0\n        valid_remaining_capacities = remaining_capacities[valid_bins]\n        # Term 1: Favor tighter fits\n        term1 = 1.0 / (valid_remaining_capacities + 1e-6)  # Avoid division by zero\n        # Term 2: Favor bins with more space when the fit is already acceptable\n        term2 = valid_remaining_capacities\n        # Adjust weights based on item size relative to smallest bin\n        smallest_bin = np.min(bins)\n        weight1 = 1.0 / (1.0 + np.exp(-(item / smallest_bin - 0.5))) # Weight between 0 and 1\n        weight2 = 1.0 - weight1\n        # Weighted sum of terms\n        priorities = weight1 * term1 + weight2 * term2\n        # Prepare output array with -inf where item doesn't fit\n        priorities_full = np.full(len(bins), -np.inf)\n        priorities_full[valid_bins] = priorities\n\n", "score": -212.75}