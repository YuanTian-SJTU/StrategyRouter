{"sample_order": 7, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    base_priorities = -log_ratios\n    \n    adjusted_priorities = np.copy(base_priorities)\n    \n    for i, bin_capacity in enumerate(bins):\n        if item > bin_capacity:\n            adjusted_priorities[i] *= 1.5  # Penalize overcapacity\n        elif item > 0.8 * bin_capacity:\n            adjusted_priorities[i] *= 1.2  # Penalize near overcapacity\n        elif item < 0.2 * bin_capacity:\n            adjusted_priorities[i] *= 0.8  # Penalize undercapacity\n    \n    for i in range(len(bins)):\n        if i > 0 and bins[i] < bins[i - 1]:\n            adjusted_priorities[i] += 0.1 * adjusted_priorities[i - 1]  # Encourage consecutive smaller bins\n    \n    return adjusted_priorities\n\n", "score": -440.15}