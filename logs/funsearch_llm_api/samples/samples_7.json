{"sample_order": 7, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with Best Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"\n    Hybrid strategy combining Best Fit and Worst Fit.\n    \n    This strategy aims to balance between the Best Fit (minimizing the leftover space) and Worst Fit (maximizing the use of larger bins).\n    A weighted sum of the two strategies is used to determine the final priority score.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n    \n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best Fit strategy\n    best_fit_ratios = (bins - item) / bins\n    best_fit_priorities = -best_fit_ratios\n\n    # Worst Fit strategy\n    worst_fit_ratios = 1 - best_fit_ratios\n    worst_fit_priorities = worst_fit_ratios\n\n    # Combine the two strategies with a weighted sum\n    weights = [0.7, 0.3]  # More weight to Best Fit\n    combined_priorities = weights[0] * best_fit_priorities + weights[1] * worst_fit_priorities\n\n    return combined_priorities\n\n", "score": -212.0}