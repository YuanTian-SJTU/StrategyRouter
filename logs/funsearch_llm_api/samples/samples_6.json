{"sample_order": 6, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with a hybrid strategy combining Best Fit and Worst Fit.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best Fit component: prioritize bins that can accommodate the item with the least remaining space\n    best_fit_scores = -np.abs(bins - item)\n    \n    # Worst Fit component: prioritize bins that have the most remaining space\n    worst_fit_scores = bins\n    \n    # Hybrid score: combine Best Fit and Worst Fit scores with weights\n    hybrid_scores = 0.7 * best_fit_scores + 0.3 * worst_fit_scores\n    \n    return hybrid_scores\n\n", "score": -212.0}