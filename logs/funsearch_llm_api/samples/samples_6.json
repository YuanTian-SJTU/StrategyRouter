{"sample_order": 6, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with Best Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"\n    Hybrid strategy combining Best Fit and Worst Fit. \n    Best Fit aims to minimize the space left in a bin, while Worst Fit aims to fill the largest bins first.\n    This hybrid strategy uses a weighted combination of both to balance the two approaches.\n    \"\"\"\n    best_fit_scores = 1 / (bins - item + 1e-9)  # Avoid division by zero\n    worst_fit_scores = bins - item\n    hybrid_scores = 0.7 * best_fit_scores + 0.3 * worst_fit_scores\n    return hybrid_scores\n\n", "score": -377.5}