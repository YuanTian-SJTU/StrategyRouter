{"sample_order": 6, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    \n    for i in range(len(bins)):\n        if bins[i] < item:\n            priorities[i] = -np.inf\n        elif bins[i] - item < 0.1 * bins[i]:\n            priorities[i] *= 1.5\n        else:\n            priorities[i] *= 1.1\n    \n    max_priority = np.max(penalties)\n    if max_priority > 100:\n        priorities = priorities / max_priority * 100\n    \n    for i in range(len(bins)):\n        if priorities[i] > 50:\n            for j in range(i + 1, len(bins)):\n                if priorities[j] < 30:\n                    priorities[j] += 0.1 * (50 - priorities[j])\n                    priorities[i] -= 0.1 * (priorities[i] - 50)\n                    break\n    \n    return priorities\n\n", "score": null}