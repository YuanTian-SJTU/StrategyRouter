{"sample_order": 8, "strategy": "hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with a Hybrid strategy \n    combining Best Fit and First Fit approaches. It prioritizes bins where the item fits \n    exactly first, then uses Best Fit for the remaining bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Check for exact fits first\n    exact_fits = bins == item\n    if np.any(exact_fits):\n        priorities = -np.where(exact_fits, 0, np.inf)\n    else:\n        # Use Best Fit for the remaining bins\n        ratios = item / bins\n        log_ratios = np.log(ratios)\n        priorities = -log_ratios\n    return priorities\n\n", "score": -377.5}