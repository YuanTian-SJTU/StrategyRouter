{"sample_order": 8, "strategy": "first_fit", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with First Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Prioritize bins where the item can fit and prefer the first suitable bin\n    # Negative infinity for bins where the item does not fit\n    can_fit = bins >= item\n    priorities = np.where(can_fit, np.inf, -np.inf)\n    # Add item size to simulate FIRST FIT behavior, if it fits, it'll prefer the earliest bins\n    priorities[can_fit] = bins[can_fit] - item\n    # Set the first suitable bin to the highest priority\n    first_suitable = np.argmax(can_fit)\n    if can_fit[first_suitable]:\n        priorities[first_suitable] = np.inf\n    else:\n        priorities[:] = -np.inf  # No bin available\n    return priorities\n\n", "score": -212.75}