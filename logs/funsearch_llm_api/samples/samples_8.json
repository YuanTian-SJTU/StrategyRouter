{"sample_order": 8, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    \n    # Adjust priorities based on bin capacity\n    for i, capacity in enumerate(bins):\n        if capacity < item:\n            priorities[i] = -np.inf  # Item cannot fit in the bin\n        elif capacity < 0.1 * item:\n            priorities[i] *= 2  # Strongly favor bins that are just slightly too small\n        elif capacity < 0.5 * item:\n            priorities[i] *= 1.5  # Favor bins that are slightly too small\n        elif capacity < 2 * item:\n            priorities[i] *= 0.8  # Slightly disfavor bins that are much larger\n        else:\n            priorities[i] *= 0.5  # Strongly disfavor bins that are much larger\n    \n    # Normalize priorities\n    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-9)\n    \n    return priorities\n\n", "score": -358.7}