{"sample_order": 8, "strategy": "hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a Hybrid Strategy.\n\n    The strategy combines aspects of Best Fit and First Fit:\n    - Best Fit aspect: Prioritize bins that leave the least remaining space after fitting the item.\n    - First Fit aspect: Penalize bins that would exceed their capacity to avoid overfilling.\n\n    The priority score is calculated as:\n    (remaining_capacity - item) ** 2 if remaining_capacity >= item else -np.inf\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score for each bin.\n    \"\"\"\n    remaining_capacity = bins - item\n    priorities = np.where(remaining_capacity >= 0, -np.square(remaining_capacity), -np.inf)\n    return priorities\n\n", "score": -212.0}