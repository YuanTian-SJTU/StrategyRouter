{"sample_order": 8, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with Hybrid Fit strategy.\n\n    The Hybrid Fit strategy combines elements of Best Fit and Worst Fit to find a balance between \n    minimizing space wastage and maximizing utilization. It prioritizes bins that can accommodate \n    the item with the smallest residual space (Best Fit) but also considers bins that have the largest \n    residual space after addition (Worst Fit) to avoid early bin exhaustion.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    residual_space = bins - item\n    valid_bins = residual_space >= 0\n    \n    best_fit_scores = np.where(valid_bins, -residual_space, np.inf)\n    worst_fit_scores = np.where(valid_bins, residual_space, -np.inf)\n    \n    hybrid_scores = (best_fit_scores + worst_fit_scores) / 2\n    return hybrid_scores\n\n", "score": -212.75}