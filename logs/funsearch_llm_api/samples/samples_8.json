{"sample_order": 8, "strategy": "hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with a Hybrid Best Fit and Capacity-Based strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best Fit component: prioritize bins that fit the item with minimal remaining space\n    remaining_space = bins - item\n    best_fit_mask = remaining_space >= 0\n    best_fit_scores = np.where(best_fit_mask, 1 / (remaining_space + 1e-6), np.inf)\n    \n    # Capacity-Based component: prioritize bins closer to full capacity\n    capacity_scores = bins / (bins + item + 1e-6)\n    \n    # Hybrid priority: combine Best Fit and Capacity-Based scores\n    priorities = 0.7 * best_fit_scores + 0.3 * capacity_scores\n    return priorities\n\n", "score": -321.95}