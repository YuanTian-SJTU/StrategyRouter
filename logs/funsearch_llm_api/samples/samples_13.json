{"sample_order": 13, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    \n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity < item:\n            priorities[i] = -np.inf\n        elif bin_capacity < 2 * item:\n            priorities[i] += 0.5 * (bin_capacity - item)\n        else:\n            priorities[i] += 1.0 * (bin_capacity - item)\n    \n    if np.all(priorities == -np.inf):\n        return np.zeros_like(priorities)\n    \n    max_priority = np.max(priorities)\n    priorities = priorities / max_priority\n    \n    return priorities\n\n", "score": -500.0}