{"sample_order": 13, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with Best Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid approach combining Best Fit and Worst Fit strategies.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best Fit component: prioritize bins that are just enough to fit the item\n    best_fit_ratios = item / bins\n    best_fit_scores = -np.abs(best_fit_ratios - 1)\n\n    # Worst Fit component: prioritize bins that are less full\n    worst_fit_ratios = (bins - item) / bins\n    worst_fit_scores = worst_fit_ratios\n\n    # Combine the scores: Weighted sum of Best Fit and Worst Fit scores\n    alpha = 0.7  # Weight for Best Fit\n    beta = 0.3   # Weight for Worst Fit\n    priorities = alpha * best_fit_scores + beta * worst_fit_scores\n\n    return priorities\n\n", "score": -212.0}