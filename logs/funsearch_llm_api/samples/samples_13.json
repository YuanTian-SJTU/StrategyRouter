{"sample_order": 13, "strategy": "hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with Hybrid (Best Fit + Worst Fit) strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best Fit component: Prioritize bins where the remaining space is closest to the item size\n    best_fit_scores = -np.abs(bins - item)\n    \n    # Worst Fit component: Prioritize bins with the largest remaining space\n    worst_fit_scores = -bins\n    \n    # Combine the two strategies with equal weights\n    hybrid_scores = best_fit_scores + worst_fit_scores\n    \n    return hybrid_scores\n\n", "score": -212.0}