{"sample_order": 13, "strategy": "hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a Hybrid Best-Fit and Greedy strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best-Fit component: prioritize bins that can fit the item with smallest remaining space\n    best_fit_priority = item / (bins - item)\n    best_fit_priority[bins < item] = np.inf  # mark bins that can't fit the item\n\n    # Greedy component: prioritize bins with smallest remaining space\n    greedy_priority = -(bins - item)\n\n    # Hybrid score: combine Best-Fit and Greedy components\n    hybrid_score = 0.6 * best_fit_priority + 0.4 * greedy_priority\n\n    return -hybrid_score  # return negated for correct priority order\n\n", "score": -500.0}