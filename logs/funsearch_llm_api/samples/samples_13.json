{"sample_order": 13, "strategy": "Hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid strategy \n    combining Best Fit and Worst Fit, adjusted by a harmonic weight based on bin load.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score for each bin.\n    \"\"\"\n    remaining_capacities = bins - item\n    valid_bins_mask = remaining_capacities > 0\n    \n    # Best Fit component: prioritize bins with smallest remaining capacity\n    best_fit_scores = np.where(valid_bins_mask, -remaining_capacities, np.inf)\n    \n    # Worst Fit component: prioritize bins with largest remaining capacity\n    worst_fit_scores = np.where(valid_bins_mask, remaining_capacities, -np.inf)\n    \n    # Harmonic weight based on bin load (higher weight for more loaded bins)\n    harmonic_weights = 1 / (bins + 1e-9)  # Avoid division by zero\n    \n    # Combined score: weighted sum of Best Fit and Worst Fit\n    combined_scores = (best_fit_scores * harmonic_weights + \n                       worst_fit_scores * (1 - harmonic_weights))\n    \n    return combined_scores\n\n", "score": -377.5}