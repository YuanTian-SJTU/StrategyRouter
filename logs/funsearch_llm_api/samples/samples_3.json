{"sample_order": 3, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid First-Fit and Best-Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Step 1: Apply First-Fit strategy to identify valid bins\n    valid_bins = bins >= item\n    if not np.any(valid_bins):\n        return np.full_like(bins, -np.inf)  # No valid bin found\n    \n    # Step 2: Apply Best-Fit strategy only on valid bins\n    ratios = item / bins[valid_bins]\n    scores = -np.log(ratios)\n    \n    # Step 3: Fill scores for invalid bins with -inf\n    priorities = np.full_like(bins, -np.inf)\n    priorities[valid_bins] = scores\n    \n    return priorities\n\n", "score": -236.2}