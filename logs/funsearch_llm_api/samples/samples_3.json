{"sample_order": 3, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    base_priorities = -log_ratios\n    adjusted_priorities = np.zeros_like(base_priorities)\n    \n    for i, ratio in enumerate(ratios):\n        if ratio < 0.5:\n            adjusted_priorities[i] = base_priorities[i] * 1.5\n        elif ratio < 1.0:\n            adjusted_priorities[i] = base_priorities[i] * 1.2\n        elif ratio < 1.5:\n            adjusted_priorities[i] = base_priorities[i] * 1.1\n        else:\n            adjusted_priorities[i] = base_priorities[i] * 0.9\n    \n    for i in range(len(bins)):\n        if bins[i] < item:\n            adjusted_priorities[i] *= 0.5  # Lower priority if item is too large for bin\n    \n    return adjusted_priorities\n\n", "score": -500.0}