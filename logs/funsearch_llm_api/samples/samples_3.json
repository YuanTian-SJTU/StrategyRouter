{"sample_order": 3, "strategy": "hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with a Hybrid Strategy.\n\n    This strategy combines elements of Best Fit (prioritizes bins where the item fits with minimal space left)\n    and First Fit (prioritizes bins where the item fits with a reasonable amount of space left, avoiding very tight fits).\n    It computes a priority score that balances between fitting tightly and leaving some room for future items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Mask to only consider bins that can fit the item\n    can_fit = (bins >= item)\n    # Priority for bins that cannot fit the item is negative infinity\n    priorities = np.full_like(bins, -np.inf, dtype=np.float32)\n    \n    # Compute priority for bins that can fit the item\n    remaining_space = bins - item\n    # Normalize remaining space to [0, 1] range\n    normalized_space = remaining_space / bins\n    # Best Fit component: prefer bins with minimal remaining space\n    best_fit_score = -normalized_space\n    # First Fit component: prefer bins with a reasonable amount of space left (0.5 is a heuristic threshold)\n    first_fit_score = np.where(normalized_space <= 0.5, normalized_space * 2, 1 - normalized_space)\n    # Combine the two components with weights (0.7 for Best Fit, 0.3 for First Fit)\n    priorities[can_fit] = 0.7 * best_fit_score[can_fit] + 0.3 * first_fit_score[can_fit]\n    \n    return priorities\n\n", "score": -212.0}