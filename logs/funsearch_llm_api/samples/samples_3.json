{"sample_order": 3, "strategy": "hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with a hybrid Best-Fit and Worst-Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Best-Fit component: prioritize bins with the smallest remaining capacity that can fit the item\n    best_fit_scores = np.where(bins >= item, -np.log(item / bins), -np.inf)\n    \n    # Worst-Fit component: prioritize bins with the largest remaining capacity\n    worst_fit_scores = np.where(bins >= item, np.log(1 / bins), -np.inf)\n    \n    # Hybrid score: combine Best-Fit and Worst-Fit with weights\n    hybrid_score = 0.6 * best_fit_scores + 0.4 * worst_fit_scores\n    \n    return hybrid_score\n\n", "score": -500.0}