{"sample_order": 3, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with Best Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"\n    Hybrid strategy combining Best Fit and Worst Fit approaches.\n    - Best Fit: Tends to fill bins as full as possible.\n    - Worst Fit: Tends to keep bins with more space available.\n    - Hybrid: A weighted combination of both to balance between filling bins and keeping some space for future items.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    best_fit_ratios = item / bins\n    best_fit_log_ratios = np.log(best_fit_ratios)\n    best_fit_priorities = -best_fit_log_ratios\n\n    worst_fit_ratios = (bins - item) / bins\n    worst_fit_log_ratios = np.log(worst_fit_ratios)\n    worst_fit_priorities = -worst_fit_log_ratios\n\n    # Combining both priorities with a weight factor\n    weight_best_fit = 0.7\n    weight_worst_fit = 0.3\n    hybrid_priorities = (weight_best_fit * best_fit_priorities) + (weight_worst_fit * worst_fit_priorities)\n\n    return hybrid_priorities\n\n", "score": -325.5}