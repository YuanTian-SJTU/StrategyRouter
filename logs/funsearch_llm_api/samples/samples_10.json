{"sample_order": 10, "strategy": "Next Fit", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with Next Fit strategy.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n        \n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Initialize priorities to -infinity\n    priorities = np.full_like(bins, -np.inf)\n    \n    # The priority is highest for the first bin that has enough capacity\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1 - (item / bins[i])\n            break\n            \n    return priorities\n\n", "score": -212.75}