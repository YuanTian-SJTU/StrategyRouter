{"sample_order": 10, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with Best Fit strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid strategy combining Best Fit and Worst Fit.\n\n    The hybrid strategy aims to balance between the Best Fit and Worst Fit strategies. It assigns a higher priority to bins that are nearly full (Best Fit) and bins that have the most remaining space (Worst Fit). This helps in achieving a more balanced distribution of items across bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    best_fit_ratios = item / bins\n    worst_fit_ratios = (bins - item) / bins\n    best_fit_scores = -np.log(best_fit_ratios)\n    worst_fit_scores = np.log(worst_fit_ratios)\n    \n    # Combine the scores using a weighted average\n    alpha = 0.7  # Weight for Best Fit\n    beta = 0.3   # Weight for Worst Fit\n    priorities = alpha * best_fit_scores + beta * worst_fit_scores\n    return priorities\n\n", "score": -500.0}