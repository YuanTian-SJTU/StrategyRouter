{"sample_order": 10, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n    priorities = np.zeros_like(bins, dtype=float)\n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity == 0:\n            priorities[i] = -np.inf\n        else:\n            ratio = item / bin_capacity\n            if ratio < 0.5:\n                priorities[i] = (1 - ratio) * 10\n            elif ratio < 1.0:\n                priorities[i] = (1 - ratio) * 5\n            else:\n                priorities[i] = -np.log(ratio)\n    return priorities\n\n", "score": null}