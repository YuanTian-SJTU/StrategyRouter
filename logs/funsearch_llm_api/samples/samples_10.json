{"sample_order": 10, "strategy": "greedy", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with Greedy strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    remaining_capacities = bins - item\n    feasible_bins = remaining_capacities[remaining_capacities >= 0]\n    if len(feasible_bins) == 0:\n        return np.full_like(bins, -np.inf)\n    \n    greedy_scores = np.array([1 / (capacity + 1e-6) for capacity in feasible_bins])\n    priorities = np.full_like(bins, -np.inf)\n    priorities[remaining_capacities >= 0] = greedy_scores\n    return priorities\n\n", "score": -212.4}