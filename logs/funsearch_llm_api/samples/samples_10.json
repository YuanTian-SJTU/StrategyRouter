{"sample_order": 10, "strategy": "worst_fit", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with a combination of Best Fit and Worst Fit strategies.\n\n    The priority score is calculated based on both the tightest fit and the looser fit to handle a wider range of bin capacities.\n    The score is a weighted sum of the negative log of the ratio of the item to the remaining bin capacity,\n    and the absolute difference between the item size and the remaining bin capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    best_fit_priorities = -log_ratios\n    worst_fit_priorities = np.abs(bins - item)\n    combined_priorities = best_fit_priorities + worst_fit_priorities\n    return combined_priorities\n\n", "score": -500.0}