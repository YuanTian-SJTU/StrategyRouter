{"sample_order": 10, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a Hybrid strategy.\n    This strategy combines Best Fit and First Fit approaches by considering both\n    the remaining space and the earliest available bin that can accommodate the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Filter bins that can accommodate the item\n    feasible = bins >= item\n    if not np.any(feasible):\n        return np.full_like(bins, np.inf)  # No feasible bins\n    \n    # Best Fit component: prioritize bins with smallest remaining space\n    best_fit_priority = -np.log(item / bins)\n    \n    # First Fit component: prioritize bins in the original order\n    first_fit_priority = np.arange(len(bins))[feasible]\n    \n    # Hybrid priority: combine both components\n    priority = (0.7 * best_fit_priority + 0.3 * first_fit_priority) * feasible + \\\n               np.inf * (1 - feasible)\n    \n    return priority\n\n", "score": null}