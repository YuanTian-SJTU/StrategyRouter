{"sample_order": 9, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a Greedy strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Greedy strategy: prioritize bins with the most remaining capacity\n    remaining_capacities = bins - item\n    valid_capacities = np.where(remaining_capacities >= 0, remaining_capacities, -np.inf)\n    priorities = -np.log(remaining_capacities + 1e-9)  # Add small value to avoid log(0)\n    return priorities\n\n", "score": -212.0}