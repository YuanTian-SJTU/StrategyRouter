{"sample_order": 9, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    \n    # Adjust priorities based on bin sizes and item size\n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity < item:\n            priorities[i] -= 1000  # Penalize bins that cannot fit the item\n        elif bin_capacity < 2 * item:\n            priorities[i] += 50  # Slightly prefer bins that are just large enough\n        else:\n            priorities[i] += 10  # Prefer bins with more capacity\n    \n    # Normalize priorities\n    if np.any(priorities):\n        priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities))\n    \n    return priorities\n\n", "score": -223.95}