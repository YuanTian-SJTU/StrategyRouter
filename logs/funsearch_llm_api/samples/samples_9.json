{"sample_order": 9, "strategy": "hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a hybrid strategy that combines Best Fit and a penalty for large remaining space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    remaining_spaces = bins - item\n    penalty = 1 / (1 + np.exp(-remaining_spaces))  # Sigmoid function to penalize large remaining spaces\n    adjusted_priorities = priorities * (1 - penalty)\n    return adjusted_priorities\n\n", "score": -213.0}