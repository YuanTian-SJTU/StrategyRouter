{"sample_order": 9, "strategy": "hybrid", "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin with a Hybrid Best Fit and Worst Fit strategy.\n\n    This strategy combines elements of both Best Fit and Worst Fit approaches:\n    - It prioritizes bins that closely fit the item (Best Fit-like).\n    - It also gives some consideration to bins with the smallest remaining space (Worst Fit-like), \n      specifically targeting those that are nearly empty to promote balanced bin filling.\n\n    The priority score is a weighted sum of:\n    1. The reciprocal of the leftover space after placing the item (Best Fit component).\n    2. The normalized value of the leftover space (Worst Fit component).\n    The weights are chosen to give slightly more importance to the Best Fit criterion.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if item <= 0:\n        return np.ones_like(bins) * -np.inf  # Cannot place non-positive items.\n\n    # Calculate remaining capacities after adding the item\n    remaining = bins - item\n    \n    # Mask for feasible bins\n    feasible = remaining >= 0\n    \n    # Initialize priorities with negative infinity for infeasible bins\n    priorities = np.full_like(bins, -np.inf, dtype=np.float64)\n    \n    if not np.any(feasible):\n        return priorities  # No feasible bins, all priorities are -inf.\n    \n    # Best Fit component: Reciprocal of the remaining space\n    bf_component = 1 / remaining[feasible]\n    \n    # Worst Fit component: Normalized value of the remaining space\n    worst_fit = remaining[feasible]\n    norm_worst_fit = worst_fit / np.max(worst_fit)  # Normalize to [0, 1]\n    \n    # Combine the components with weights (e.g., 0.7 for Best Fit, 0.3 for Worst Fit)\n    combined = 0.7 * bf_component + 0.3 * norm_worst_fit\n    \n    # Assign the combined priorities to feasible bins\n    priorities[feasible] = combined\n    \n    return priorities\n\n", "score": -352.45}